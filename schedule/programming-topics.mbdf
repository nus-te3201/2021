<div id="week1">
<div id="week1-toc">

* [**Expressions, Data Types, Variables**]({{ baseUrl }}/programming/chapters/expressions-types-variables.html#expressions-data-types-variables)
  * [Computer Programs]({{ baseUrl }}/programming/chapters/expressions-types-variables.html#computer-programs)
  * [Setting up the Programming Environment]({{ baseUrl }}/programming/chapters/expressions-types-variables.html#setting-up-the-programming-environment)
  * [Working with an Interactive Shell]({{ baseUrl }}/programming/chapters/expressions-types-variables.html#working-with-an-interactive-shell)
  * [Operators]({{ baseUrl }}/programming/chapters/expressions-types-variables.html#operators)
  * [Data Types]({{ baseUrl }}/programming/chapters/expressions-types-variables.html#data-types)
  * [Variables]({{ baseUrl }}/programming/chapters/expressions-types-variables.html#variables)
* [**Python Programs**]({{ baseUrl }}/programming/chapters/programs.html#python-programs)
  * [Scripts (Programs)]({{ baseUrl }}/programming/chapters/programs.html#scripts-programs)
  * [Comments]({{ baseUrl }}/programming/chapters/programs.html#comments)
  * [Using Functions]({{ baseUrl }}/programming/chapters/programs.html#using-functions)
</div>

## **Expressions, Data Types, Variables**

<include src="../programming/programs/text.md" />{{ hr_double }}
<include src="../programming/environment/text.md" />{{ hr_double }}
<include src="../programming/shell/text.md" />{{ hr_double }}
<include src="../programming/operators/text.md" />{{ hr_double }}
<include src="../programming/types/text.md" />{{ hr_double }}
<include src="../programming/variables/text.md" />{{ hr_double }}

## **Python Programs**

<include src="../programming/scripts/text.md" />{{ hr_double }}
<include src="../programming/comments/text.md" />{{ hr_double }}
<include src="../programming/usingFunctions/text.md" />{{ hr_double }}
</div>

<div id="week2">
<div id="week2-toc">

* [**Program Flow Control**]({{ baseUrl }}/programming/chapters/flowcontrol.html#program-flow-control)
  * [Booleans]({{ baseUrl }}/programming/chapters/flowcontrol.html#booleans)
  * [`if` Statements]({{ baseUrl }}/programming/chapters/flowcontrol.html#if-statements)
  * [`while` Statements]({{ baseUrl }}/programming/chapters/flowcontrol.html#while-statements)
  * [`for` Statements]({{ baseUrl }}/programming/chapters/flowcontrol.html#for-statements)
  * [Importing Modules]({{ baseUrl }}/programming/chapters/flowcontrol.html#importing-modules)
  * [Early Termination]({{ baseUrl }}/programming/chapters/flowcontrol.html#early-termination)

</div>

## **Program Flow Control**

<include src="../programming/booleans/text.md" />{{ hr_double }}
<include src="../programming/if/text.md" />{{ hr_double }}
<include src="../programming/while/text.md" />{{ hr_double }}
<include src="../programming/for/text.md" />{{ hr_double }}
<include src="../programming/import/text.md" />{{ hr_double }}
<include src="../programming/exit/text.md" />{{ hr_double }}

</div>
<div id="week3">
<div id="week3-toc">

* [**Functions**]({{ baseUrl }}/programming/chapters/functions.html#functions)
  * [Writing Functions]({{ baseUrl }}/programming/chapters/functions.html#writing-functions)
  * [Function Parameters]({{ baseUrl }}/programming/chapters/functions.html#function-parameters)
  * [Return Value]({{ baseUrl }}/programming/chapters/functions.html#return-value)
  * [Local and Global Scope]({{ baseUrl }}/programming/chapters/functions.html#local-and-global-scope)
</div>

## **Functions**

<include src="../programming/functions-def/text.md" />{{ hr_double }}
<include src="../programming/functions-parameters/text.md" />{{ hr_double }}
<include src="../programming/functions-return/text.md" />{{ hr_double }}
<include src="../programming/functions-scope/text.md" />{{ hr_double }}
</div>

<div id="week4">
<div id="week4-toc">

* [**Lists**]({{ baseUrl }}/programming/chapters/lists.html#lists)
  * [The List Data Structure]({{ baseUrl }}/programming/chapters/lists.html#the-list-data-structure)
  * [Object References]({{ baseUrl }}/programming/chapters/lists.html#object-references)
  * [Working with Lists]({{ baseUrl }}/programming/chapters/lists.html#working-with-lists)
  * [Methods]({{ baseUrl }}/programming/chapters/lists.html#methods)
  * [List Methods]({{ baseUrl }}/programming/chapters/lists.html#list-methods)
</div>

## **Lists**

<include src="../programming/lists-intro/text.md" />{{ hr_double }}
<include src="../programming/objectReferences/text.md" />{{ hr_double }}
<include src="../programming/lists-workingWith/text.md" />{{ hr_double }}
<include src="../programming/methods/text.md" />{{ hr_double }}
<include src="../programming/lists-methods/text.md" />{{ hr_double }}
</div>
<div id="week5">
<div id="week5-toc">

* [**Error Handling**]({{ baseUrl }}/programming/chapters/errors.html#error-handling)
  * [Introduction to Errors]({{ baseUrl }}/programming/chapters/errors.html#introdution-to-errors)
  * [Syntax Errors]({{ baseUrl }}/programming/chapters/errors.html#syntax-errors)
  * [Handling Exceptions]({{ baseUrl }}/programming/chapters/errors.html#handling-exceptions)
  * [Raising Exceptions]({{ baseUrl }}/programming/chapters/errors.html#raising-exceptions)
* [**Strings**]({{ baseUrl }}/programming/chapters/strings.html#strings)
  * [String Literals]({{ baseUrl }}/programming/chapters/strings.html#string-literals)
  * [Working with Strings]({{ baseUrl }}/programming/chapters/strings.html#working-with-strings)
  * [String Methods]({{ baseUrl }}/programming/chapters/strings.html#string-methods)
</div>

## **Error Handling**

<include src="../programming/errors-intro/text.md" />{{ hr_double }}
<include src="../programming/errors-syntax/text.md" />{{ hr_double }}
<include src="../programming/errors-exceptions-handling/text.md" />{{ hr_double }}
<include src="../programming/errors-exceptions-raising/text.md" />{{ hr_double }}

## **Strings**

<include src="../programming/strings-literals/text.md" />{{ hr_double }}
<include src="../programming/strings-workingWith/text.md" />{{ hr_double }}
<include src="../programming/strings-methods/text.md" />{{ hr_double }}

</div>
<div id="week6">
<div id="week6-toc">

* [**Files**]({{ baseUrl }}/programming/chapters/files.html#files)
  * [File Paths]({{ baseUrl }}/programming/chapters/files.html#file-paths)
  * [Reading from Files]({{ baseUrl }}/programming/chapters/files.html#reading-from-files)
  * [Writing to Files]({{ baseUrl }}/programming/chapters/files.html#writing-to-files)
  * [CSV Files]({{ baseUrl }}/programming/chapters/files.html#csv-files)
* [**Using an IDE**]({{ baseUrl }}/programming/chapters/ide.html#appendix-b-using-an-ide)
</div>

<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

Most programs need to read from, and write to, files in the hard disk. The topics below cover the Python basics of file reading/writing.
</variable>
</include>

## **Files**

<include src="../programming/files-paths/text.md" />{{ hr_double }}
<include src="../programming/files-reading/text.md" />{{ hr_double }}
<include src="../programming/files-writing/text.md" />{{ hr_double }}
<include src="../programming/files-csv/text.md" />{{ hr_double }}

<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

You are already familiar with repl.it, which can be considered an _online IDE_ with limited features. It is now time to learn a non-online IDE which often can do more things than an online IDE.

**We recommend you use an IDE for your project work from now on**, but you can continue to use repl.it for weekly exercises. The topics below describe two possible options: IDLE (lighter, simpler) and PyCharm (heavier, more powerful).
</variable>
</include>

<include src="../programming/ide/text.md" />{{ hr_double }}

</div>
<div id="week7">
<div id="week7-toc">

* [**Dictionaries**]({{ baseUrl }}/programming/chapters/dictionaries.html#dictionaries)
  * [The Dictionary Data Structure]({{ baseUrl }}/programming/chapters/dictionaries.html#the-dictionary-data-structure)
  * [Working with Dictionaries]({{ baseUrl }}/programming/chapters/dictionaries.html#working-with-dictionaries)
  * [Nested Dictionaries]({{ baseUrl }}/programming/chapters/dictionaries.html#nested-dictionaries)
</div>

<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

So far, we have learned how to use Python lists to store sequences of objects. This week we move onto another slightly more complex data structure called _dictionary_ which can store a collection of key-value pairs.
</variable>
</include>

## **Dictionaries**

<include src="../programming/dictionaries-intro/text.md" />{{ hr_double }}
<include src="../programming/dictionaries-workingWith/text.md" />{{ hr_double }}
<include src="../programming/dictionaries-nested/text.md" />{{ hr_double }}
</div>
<div id="week8">
<div id="week8-toc">

* [**Object-Oriented Programing - Part I**]({{ baseUrl }}/programming/chapters/oop.html#object-oriented-programming)
  * [Classes]({{ baseUrl }}/programming/chapters/oop.html#classes)
<br>
<br>

* [**Installing 3rd Party Modules**]({{ baseUrl }}/programming/chapters/thirdparty.html#appendix-a-installing-3rd-party-modules)
</div>

<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

So far, we have been using simple objects provided by Python (e.g., str, int, bool) and putting them into lists, dictionaries (which are objects themselves), and combinations of the two (e.g., a list of dictionaries) to arrange our data.

**It is now time to learn how to define our own classes** so that we can create objects that match our needs e.g., to use `Task` objects to represent a task in Monty, instead of using a list such as `["read book", True]`{.python}.

==Before reading the section below which explains how to write Python classes, read the SE topic [OOP: Basics]({{ baseUrl }}/book/oop/classes/what/index.html) get a general idea about classes.==

:fas-video: The relevant video lecture is [here](https://mediaweb.ap.panopto.com/Panopto/Pages/Viewer.aspx?id=c24f1e47-7974-4b75-bf5e-ab7a00a201fd).
</variable>
</include>

## **Object-Oriented Programming**

<include src="../programming/oop-classes/text.md" />{{ hr_double }}

<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

**Next, let's learn how to install and use third-party libraries** so that you can use even more functionality than those Python provides by default.

:fas-video: The relevant video lecture is [here](https://mediaweb.ap.panopto.com/Panopto/Pages/Viewer.aspx?id=e579523f-89cb-4e39-a315-ab7a00a8bc8b).
</variable>
</include>

<include src="../programming/thirdparty/text.md" />{{ hr_double }}

</div>
<div id="week9">
<div id="week9-toc">

* [**Object-Oriented Programing - Part II**]({{ baseUrl }}/programming/chapters/oop.html#object-oriented-programming)
  * [Class-Level Members]({{ baseUrl }}/programming/chapters/oop.html#class-level-members)
  * [Visibility]({{ baseUrl }}/programming/chapters/oop.html#visibility)
* [**Organizing Python Code**]({{ baseUrl }}/programming/chapters/organizing.html#appendix-c-organizing-python-code)
</div>

<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

**This week, we continue to learn more about Python classes.** Let's start with _class-level_ variables and methods.

:fas-video: The relevant video lecture is [here](https://mediaweb.ap.panopto.com/Panopto/Pages/Viewer.aspx?id=37c74051-6261-4d0b-a517-ab8100a9c87d).
</variable>
</include>

## **Object-Oriented Programming**

<include src="../programming/oop-classLevelMembers/text.md" />{{ hr_double }}


<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

Next, let us learn to to control access to variables and methods of an object.
</variable>
</include>

<include src="../programming/oop-visibility/text.md" />{{ hr_double }}


<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

As your project code gets bigger, it becomes cumbersome to have all code in one file. **Let's learn how to organize Python code into files and folders.**

:fas-video: The relevant video lecture is [here](https://mediaweb.ap.panopto.com/Panopto/Pages/Viewer.aspx?id=bb9cc539-a07b-4d66-ad2b-ab82009e5eed).
</variable>
</include>

<include src="../programming/organizing/text.md" />{{ hr_double }}
</div>
<div id="week10">
<div id="week10-toc">

* [**Object-Oriented Programing - Part III**]({{ baseUrl }}/programming/chapters/oop.html#object-oriented-programming---continued)
  * [Inheritance]({{ baseUrl }}/programming/chapters/oop.html#inheritance)
* [**Unit Testing**]({{ baseUrl }}/programming/chapters/unittesting.html#appendix-d-unit-testing)
</div>

## **Object-Oriented Programming**

<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

As you learn about the OOP inheritance concept (under this week's SE topics), let us also learn how to use inheritance in Python.

:fas-video: The relevant video lecture is [here](https://mediaweb.ap.panopto.com/Panopto/Pages/Viewer.aspx?id=1c82c417-5378-4b7c-84c0-ab88009b476b).

</variable>
</include>
<include src="../programming/oop-inheritance/text.md" />{{ hr_double }}

<include src="commentary-box.md" boilerplate>
<variable name="commentary_body">

Let us learn how to automate the testing of Python code using unit tests (one of the testing types you learned under this week's SE topics).

:fas-video: The relevant video lecture is [here](https://mediaweb.ap.panopto.com/Panopto/Pages/Viewer.aspx?id=3c10dfe4-413a-449d-aec8-ab8800aa5ffc).
</variable>
</include>
<include src="../programming/unittesting/text.md" />{{ hr_double }}
</div>
<div id="week11">
<div id="week11-toc">

* [**GUIs**]({{ baseUrl }}/programming/chapters/gui.html)
  * [GUI Basics]({{ baseUrl }}/programming/chapters/gui.html#gui-basics)
</div>

## **GUIs**

<include src="../programming/gui/text.md" />{{ hr_double }}

</div>
<div id="week12">
<div id="week12-toc">
<span class="indented">~No more Python Topics~</span>
</div>
</div>
<div id="week13">
<div id="week13-toc">
<span class="indented">~None~</span>
</div>
</div>







